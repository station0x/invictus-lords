{
  "language": "Solidity",
  "sources": {
    "contracts/core/ERC20Minter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.10;\r\n\r\ninterface IERC20 {\r\n    function mint(address to, uint amount) external;\r\n}\r\n\r\ncontract ERC20Minter {\r\n    address private signer;\r\n    address public operator;\r\n    address public ERC20;\r\n    bool public paused;\r\n\r\n    // daily mints allowed\r\n    uint public DailyLimit;\r\n    // day# => amount (minted per day)\r\n    mapping(uint => uint) public DailyMinted;\r\n    // user => total claimed\r\n    mapping(address => uint) public UserClaimed;\r\n\r\n    constructor(\r\n        address _signer\r\n    ) {\r\n        operator = msg.sender;\r\n        signer = _signer;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"Only operator can call this function!\");\r\n        _;\r\n    }\r\n\r\n    // getters\r\n    function getAllowedDailyMint() public view returns (uint) {\r\n        return DailyLimit - DailyMinted[block.timestamp / 24 hours];\r\n    }\r\n\r\n    // used to add ore or change its existing daily limit\r\n    function setDailyLimit(uint _limit) public onlyOperator {\r\n        DailyLimit = _limit;\r\n        emit SetDailyLimit(_limit);\r\n    }\r\n\r\n    function mint(uint _amount, uint8 _v, bytes32 _r, bytes32 _s) public {\r\n        require(!paused, \"Contract is paused!\");\r\n        // hashing amount + caller + callee + chainID\r\n        bytes32 _hash = keccak256(abi.encodePacked(_amount, msg.sender, address(this), block.chainid));\r\n        require(ecrecover(_hash, _v, _r, _s) == signer, \"Signature is not valid!\");\r\n        uint withdrawableAmount = _amount - UserClaimed[msg.sender];\r\n        require(getAllowedDailyMint() >= withdrawableAmount, \"Amounts exceeds daily minting limit\");\r\n        DailyMinted[block.timestamp / 24 hours] += withdrawableAmount;\r\n        UserClaimed[msg.sender] += withdrawableAmount;\r\n        IERC20(ERC20).mint(msg.sender, withdrawableAmount);\r\n    }\r\n\r\n    function changeOperator(address _newOperator) public onlyOperator {\r\n        operator = _newOperator;\r\n        emit ChangeOperator(_newOperator);\r\n    }\r\n\r\n    function changeERC20Address(address _newERC20) public onlyOperator {\r\n        ERC20 = _newERC20;\r\n    }\r\n\r\n    function changeSigner(address _newSigner) public onlyOperator {\r\n        signer = _newSigner;\r\n        emit ChangeSigner(_newSigner);\r\n    }\r\n\r\n    function setPaused(bool _isPaused) public onlyOperator {\r\n        paused = _isPaused;\r\n        emit SetPaused(_isPaused);\r\n    }\r\n\r\n    event SetDailyLimit(uint);\r\n    event ChangeOperator(address);\r\n    event ChangeSigner(address);\r\n    event SetPaused(bool);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}